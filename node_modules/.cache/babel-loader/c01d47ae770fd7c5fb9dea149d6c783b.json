{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Desktop/Minesweeper/minesweeper/src/components/App/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"./App.scss\";\nimport Number from \"../Number\";\nimport { generateCells, openAdjEmptyCells } from \"../../utils\";\nimport Button from '../Button';\nimport { face, cellState, cellValue } from \"../../types\";\n\nconst App = () => {\n  const [cells, setCells] = useState(generateCells());\n  const [Face, setFace] = useState(face.won);\n  const [time, setTime] = useState(0);\n  const [gameStarted, setLive] = useState(false);\n  const [mineCounter, setMineCounter] = useState(10);\n  const [lost, setLost] = useState(false);\n  useEffect(() => {\n    const mosuedown = () => {\n      setFace(face.lost);\n    };\n\n    const mouseup = () => {\n      setFace(face.won);\n    };\n\n    window.addEventListener('mousedown', mosuedown);\n    window.addEventListener('mouseup', mouseup);\n    return () => {\n      window.removeEventListener('mousedown', mosuedown);\n      window.removeEventListener('mouseup', mosuedown);\n    };\n  }, []);\n  useEffect(() => {\n    if (gameStarted && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [gameStarted, time]);\n  useEffect(() => {\n    if (lost) {\n      setFace(face.lost);\n      setLive(false);\n    }\n  }, [lost]);\n\n  const handleCellClick = (row1, col1) => () => {\n    if (!gameStarted) {\n      setLive(true);\n    }\n\n    const currentCell = cells[row1][col1];\n    let newCells = cells.slice();\n    if (currentCell.state === cellState.flagged) return; //clicked on a mine\n\n    if (currentCell.value === cellValue.bomb) {\n      setLost(true);\n      setFace(face.lost);\n    } else if (currentCell.value === cellValue.empty || currentCell.state == cellState.visible) {\n      //clicked on empty cell\n      newCells = openAdjEmptyCells(newCells, row1, col1);\n      setCells(newCells);\n    } else {\n      //clicked on a number\n      newCells[row1][col1].state = cellState.visible;\n      setCells(newCells);\n    }\n  };\n\n  const faceClicked = () => {\n    if (gameStarted) {\n      setLive(false);\n      setTime(0);\n      setCells(generateCells());\n    }\n  };\n\n  const handleRightClick = (row1, col1) => e => {\n    e.preventDefault();\n    const cell = cells[row1][col1];\n    const currentCells = cells.slice();\n    if (!gameStarted) return;\n\n    if (cell.state === cellState.visible) {\n      return;\n    } else if (cell.state === cellState.open) {\n      currentCells[row1][col1].state = cellState.flagged;\n      setCells(currentCells);\n      setMineCounter(mineCounter - 1);\n    } else if (cell.state === cellState.flagged) {\n      console.log(\"hello\");\n      currentCells[row1][col1].state = cellState.open;\n      setCells(currentCells);\n      setMineCounter(mineCounter + 1);\n    }\n  };\n\n  const renderCells = () => {\n    return cells.map((i, rowIndex) => i.map((cell, colIndex) => /*#__PURE__*/React.createElement(Button, {\n      key: `${rowIndex}-${colIndex}`,\n      row: rowIndex,\n      col: colIndex,\n      state: cell.state,\n      value: cell.value,\n      onClick: handleCellClick,\n      rightClicked: handleRightClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  const revealMines = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"Minesweeper\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Built By Hekmat\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Number, {\n    value: mineCounter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"face\",\n    onClick: faceClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-label\": \"face\",\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, Face)), /*#__PURE__*/React.createElement(Number, {\n    value: time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, renderCells()));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Matt/Desktop/Minesweeper/minesweeper/src/components/App/index.tsx"],"names":["React","useState","useEffect","Number","generateCells","openAdjEmptyCells","Button","face","cellState","cellValue","App","cells","setCells","Face","setFace","won","time","setTime","gameStarted","setLive","mineCounter","setMineCounter","lost","setLost","mosuedown","mouseup","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","handleCellClick","row1","col1","currentCell","newCells","slice","state","flagged","value","bomb","empty","visible","faceClicked","handleRightClick","e","preventDefault","cell","currentCells","open","console","log","renderCells","map","i","rowIndex","colIndex","revealMines"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, MouseEvent} from 'react';\nimport \"./App.scss\";\nimport Number from \"../Number\";\nimport {generateCells, openAdjEmptyCells} from \"../../utils\";\nimport Button from '../Button';\nimport {cell, face, cellState, cellValue} from \"../../types\";\n\nconst App: React.FC = () =>{\n    const[cells, setCells] = useState<cell[][]>(generateCells());\n    const[Face, setFace] = useState<face>(face.won);\n    const[time, setTime] = useState<number>(0);\n    const[gameStarted, setLive] = useState<boolean>(false);\n    const[mineCounter, setMineCounter] = useState<number>(10);\n    const[lost, setLost] = useState<boolean>(false);\n\n    useEffect(() =>{\n        const mosuedown = () =>{\n            setFace(face.lost);\n        }\n        const mouseup = () => {\n            setFace(face.won)\n        }\n        window.addEventListener('mousedown', mosuedown)\n        window.addEventListener('mouseup', mouseup)\n        return () => {\n            window.removeEventListener('mousedown', mosuedown)\n            window.removeEventListener('mouseup', mosuedown)\n        }\n    }, [])\n    useEffect(() => {\n        if(gameStarted && time < 999){\n            const timer = setInterval(() =>{\n                setTime(time + 1);\n            }, 1000)\n            return () => {\n                clearInterval(timer);\n            }    \n        }\n    },[gameStarted, time ]);\n    useEffect(() =>{\n        if(lost){\n            setFace(face.lost);\n            setLive(false);\n        }\n\n    },[lost])\n    const handleCellClick = (row1: number, col1: number) => (): void => {\n        if(!gameStarted){\n            setLive(true);\n        }\n        const currentCell = cells[row1][col1];\n        let newCells = cells.slice();\n        if(currentCell.state === cellState.flagged) return;\n        //clicked on a mine\n        if(currentCell.value === cellValue.bomb){\n            setLost(true);\n            setFace(face.lost);\n            \n        }else if(currentCell.value === cellValue.empty || currentCell.state == cellState.visible){//clicked on empty cell\n            newCells = openAdjEmptyCells(newCells, row1,col1)\n            setCells(newCells)\n        }else{ //clicked on a number\n            newCells[row1][col1].state = cellState.visible\n            setCells(newCells)\n        }\n    } \n    \n    const faceClicked = () => {\n        if(gameStarted){\n            setLive(false)\n            setTime(0)\n            setCells(generateCells())\n        }\n    }\n    const handleRightClick = (row1: number, col1: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void =>{\n        e.preventDefault();\n        const cell = cells[row1][col1]\n        const currentCells = cells.slice();\n        if(!gameStarted) return;\n\n        if(cell.state === cellState.visible){\n            return;\n        }else if(cell.state === cellState.open){\n            currentCells[row1][col1].state = cellState.flagged\n            setCells(currentCells)\n            setMineCounter(mineCounter - 1);\n        }else if(cell.state === cellState.flagged){\n            console.log(\"hello\")\n            currentCells[row1][col1].state = cellState.open\n            setCells(currentCells)\n            setMineCounter(mineCounter + 1);\n        }\n    }\n    const renderCells = ():React.ReactNode => {\n        return cells.map((i, rowIndex) => i.map((cell, colIndex) => \n        <Button key={`${rowIndex}-${colIndex}`} \n            row={rowIndex} \n            col={colIndex} \n            state={cell.state} \n            value={cell.value}\n            onClick={handleCellClick}\n            rightClicked={handleRightClick}\n            />)\n        );\n    };\n    \n    const revealMines = (): vid =>{\n\n    }\n    return(\n        <div className=\"App\">\n            <div className=\"preHeader\">\n                <p>Minesweeper</p>\n                <p>Built By Hekmat</p>\n            </div>\n            <div className=\"header\">\n                <Number value={mineCounter}>\n                    \n                </Number>\n                <div className=\"face\" onClick={faceClicked}> \n                    <span aria-label=\"face\" role=\"img\">{Face}</span> \n                </div>\n                <Number value={time}>\n\n                </Number>\n            </div>\n            <div className=\"body\">\n                {renderCells()}\n            </div>\n\n\n        </div>\n        \n    )\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}