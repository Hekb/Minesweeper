{"ast":null,"code":"import { MAX_ROWS, MAX_COLS, MINES } from \"../constants\";\nimport { cellState } from \"../types\";\nimport { cellValue } from \"../types\";\n// Function to generate cells\nexport const generateCells = () => {\n  let cells = [];\n\n  for (let i = 0; i < MAX_ROWS; i++) {\n    cells.push([]);\n\n    for (let j = 0; j < MAX_COLS; j++) {\n      cells[i].push({\n        value: cellValue.empty,\n        state: cellState.open\n      });\n    }\n  }\n\n  let placedMines = 0;\n\n  while (placedMines < MINES) {\n    let randomRow = Math.floor(Math.random() * MAX_ROWS);\n    let randomCol = Math.floor(Math.random() * MAX_COLS);\n    const currentCell = cells[randomRow][randomCol];\n\n    if (currentCell.value != cellValue.bomb) {\n      cells = cells.map((row, rowIndex) => row.map((cell, colIndex) => {\n        if (randomRow == rowIndex && randomCol == colIndex) {\n          return { ...cell,\n            value: cellValue.bomb\n          };\n        }\n\n        return cell;\n      }));\n      placedMines++;\n    }\n  } //generate adj number cells\n\n\n  for (let rowIndex2 = 0; rowIndex2 < MAX_ROWS; rowIndex2++) {\n    for (let colIndex2 = 0; colIndex2 < MAX_COLS; colIndex2++) {\n      const currentCell = cells[rowIndex2][colIndex2];\n\n      if (currentCell.value == cellValue.bomb) {\n        continue;\n      }\n\n      let adjBombs = 0;\n      const topLeft = rowIndex2 > 0 && colIndex2 > 0 ? cells[rowIndex2 - 1][colIndex2 - 1] : null;\n      const top = rowIndex2 > 0 ? cells[rowIndex2 - 1][colIndex2] : null;\n      const topRight = rowIndex2 > 0 && colIndex2 < MAX_COLS - 1 ? cells[rowIndex2 - 1][colIndex2 + 1] : null;\n      const left = colIndex2 > 0 ? cells[rowIndex2][colIndex2 - 1] : null;\n      const right = colIndex2 < MAX_COLS - 1 ? cells[rowIndex2][colIndex2 + 1] : null;\n      const bottomLeft = rowIndex2 < MAX_ROWS - 1 && colIndex2 > 0 ? cells[rowIndex2 + 1][colIndex2 - 1] : null;\n      const bottom = rowIndex2 < MAX_ROWS - 1 ? cells[rowIndex2 + 1][colIndex2] : null;\n      const bottomRight = rowIndex2 < MAX_ROWS - 1 && colIndex2 < MAX_COLS - 1 ? cells[rowIndex2 + 1][colIndex2 + 1] : null;\n\n      if ((topLeft === null || topLeft === void 0 ? void 0 : topLeft.value) === cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((top === null || top === void 0 ? void 0 : top.value) == cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((topRight === null || topRight === void 0 ? void 0 : topRight.value) == cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((left === null || left === void 0 ? void 0 : left.value) === cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((right === null || right === void 0 ? void 0 : right.value) == cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((bottomLeft === null || bottomLeft === void 0 ? void 0 : bottomLeft.value) == cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((bottom === null || bottom === void 0 ? void 0 : bottom.value) === cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if ((bottomRight === null || bottomRight === void 0 ? void 0 : bottomRight.value) == cellValue.bomb) {\n        adjBombs++;\n      }\n\n      if (adjBombs > 0) {\n        cells[rowIndex2][colIndex2] = { ...currentCell,\n          value: adjBombs\n        };\n      }\n    }\n  }\n\n  return cells;\n};\nexport const grabAdjCells = (cells, row, col) => {\n  const topLeft = row > 0 && col > 0 ? cells[row - 1][col - 1] : null;\n  const top = row > 0 ? cells[row - 1][col] : null;\n  const topRight = row > 0 && col < MAX_COLS - 1 ? cells[row - 1][col + 1] : null;\n  const left = col > 0 ? cells[row][col - 1] : null;\n  const right = col < MAX_COLS - 1 ? cells[row][col + 1] : null;\n  const bottomLeft = row < MAX_ROWS - 1 && col > 0 ? cells[row + 1][col - 1] : null;\n  const bottom = row < MAX_ROWS - 1 ? cells[row + 1][col] : null;\n  const bottomRight = row < MAX_ROWS - 1 && col < MAX_COLS - 1 ? cells[row + 1][col + 1] : null;\n  return {\n    topLeft,\n    top,\n    topRight,\n    left,\n    right,\n    bottomLeft,\n    bottom,\n    bottomRight\n  };\n};\nexport const openAdjEmptyCells = (cells, row, col) => {\n  const currentCell = cells[row][col];\n\n  if (currentCell.state === cellState.visible || currentCell.state === cellState.flagged) {\n    return cells;\n  }\n\n  let newCells = cells.slice();\n  newCells[row][col].state = cellState.visible;\n  const {\n    topLeft,\n    top,\n    topRight,\n    left,\n    right,\n    bottomLeft,\n    bottom,\n    bottomRight\n  } = grabAdjCells(cells, row, col);\n\n  if ((topLeft === null || topLeft === void 0 ? void 0 : topLeft.state) === cellState.open && topLeft.value != cellValue.bomb) {\n    if (topLeft.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row - 1, col - 1);\n    } else {\n      newCells[row - 1][col - 1].state = cellState.visible;\n    }\n  }\n\n  if ((top === null || top === void 0 ? void 0 : top.state) === cellState.open && top.value != cellValue.bomb) {\n    if (top.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row - 1, col);\n    } else {\n      newCells[row - 1][col].state = cellState.visible;\n    }\n  }\n\n  if ((topRight === null || topRight === void 0 ? void 0 : topRight.state) === cellState.open && topRight.value != cellValue.bomb) {\n    if (topRight.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row - 1, col + 1);\n    } else {\n      newCells[row - 1][col + 1].state = cellState.visible;\n    }\n  }\n\n  if ((left === null || left === void 0 ? void 0 : left.state) === cellState.open && left.value != cellValue.bomb) {\n    if (left.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row, col - 1);\n    } else {\n      newCells[row][col - 1].state = cellState.visible;\n    }\n  }\n\n  if ((right === null || right === void 0 ? void 0 : right.state) === cellState.open && right.value != cellValue.bomb) {\n    if (right.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row, col + 1);\n    } else {\n      newCells[row][col + 1].state = cellState.visible;\n    }\n  }\n\n  if ((bottomLeft === null || bottomLeft === void 0 ? void 0 : bottomLeft.state) === cellState.open && bottomLeft.value != cellValue.bomb) {\n    if (bottomLeft.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row + 1, col - 1);\n    } else {\n      newCells[row + 1][col - 1].state = cellState.visible;\n    }\n  }\n\n  if ((bottom === null || bottom === void 0 ? void 0 : bottom.state) === cellState.open && bottom.value != cellValue.bomb) {\n    if (bottom.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row + 1, col);\n    } else {\n      newCells[row + 1][col].state = cellState.visible;\n    }\n  }\n\n  if ((bottomRight === null || bottomRight === void 0 ? void 0 : bottomRight.state) === cellState.open && bottomRight.value != cellValue.bomb) {\n    if (bottomRight.value === cellValue.empty) {\n      newCells = openAdjEmptyCells(newCells, row + 1, col + 1);\n    } else {\n      newCells[row + 1][col + 1].state = cellState.visible;\n    }\n  }\n\n  return newCells;\n};","map":{"version":3,"sources":["/Users/Matt/Desktop/untitled folder 3/Minesweeper/minesweeper/src/utils/index.ts"],"names":["MAX_ROWS","MAX_COLS","MINES","cellState","cellValue","generateCells","cells","i","push","j","value","empty","state","open","placedMines","randomRow","Math","floor","random","randomCol","currentCell","bomb","map","row","rowIndex","cell","colIndex","rowIndex2","colIndex2","adjBombs","topLeft","top","topRight","left","right","bottomLeft","bottom","bottomRight","grabAdjCells","col","openAdjEmptyCells","visible","flagged","newCells","slice"],"mappings":"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","sourcesContent":["import {MAX_ROWS,MAX_COLS, MINES} from \"../constants\"\nimport {cellState} from \"../types\"\nimport {cellValue} from \"../types\"\nimport {cell} from \"../types\"\nimport React from 'react'\n// Function to generate cells\nexport const generateCells = () =>{\n    let cells: cell[][] = [];\n    for(let i = 0; i < MAX_ROWS; i++){\n        cells.push([]);\n        for(let j = 0; j < MAX_COLS; j++){\n            cells[i].push({\n                value: cellValue.empty,\n                state: cellState.open\n            })\n        }\n    }\n\n    let placedMines = 0;\n    while(placedMines < MINES){\n        let randomRow = Math.floor(Math.random() * MAX_ROWS);\n        let randomCol = Math.floor(Math.random() * MAX_COLS);\n        const currentCell = cells[randomRow][randomCol];\n        if(currentCell.value != cellValue.bomb){\n            cells = cells.map((row, rowIndex) => row.map((cell, colIndex) => {\n                if(randomRow == rowIndex && randomCol == colIndex){\n                    return {\n                        ... cell,\n                        value: cellValue.bomb\n                    };\n                }\n                return cell;\n            }));\n            placedMines++;\n            \n        }\n    }\n    //generate adj number cells\n    for(let rowIndex2 = 0; rowIndex2 < MAX_ROWS; rowIndex2++){\n        for(let colIndex2= 0; colIndex2 < MAX_COLS; colIndex2++){\n            const currentCell = cells[rowIndex2][colIndex2];\n            if(currentCell.value == cellValue.bomb){\n                continue;\n            }\n            let adjBombs = 0;\n            const topLeft = rowIndex2 > 0 && colIndex2 > 0 ? cells[rowIndex2-1][colIndex2-1] : null;\n            const top = rowIndex2 > 0 ? cells[rowIndex2-1][colIndex2] : null;\n            const topRight = rowIndex2 > 0 && colIndex2 < MAX_COLS - 1 ? cells[rowIndex2-1][colIndex2+1]: null;\n            const left = colIndex2 > 0 ? cells[rowIndex2][colIndex2 - 1]: null;\n            const right = colIndex2 < MAX_COLS - 1 ? cells[rowIndex2][colIndex2+1]: null;\n            const bottomLeft = rowIndex2 < MAX_ROWS - 1 && colIndex2 > 0 ? cells[rowIndex2+1][colIndex2-1]: null;\n            const bottom = rowIndex2 < MAX_ROWS - 1 ? cells[rowIndex2+1][colIndex2]: null;\n            const bottomRight = rowIndex2 < MAX_ROWS - 1 && colIndex2 < MAX_COLS - 1 ? cells[rowIndex2+1][colIndex2+1]: null;\n            \n            if(topLeft?.value === cellValue.bomb){\n                adjBombs++;\n            }\n            if(top?.value == cellValue.bomb){\n                adjBombs++;\n            }\n            if(topRight?.value == cellValue.bomb){\n                adjBombs++;\n            }\n            if(left?.value === cellValue.bomb){\n                adjBombs++;\n            }\n            if(right?.value == cellValue.bomb){\n                adjBombs++;\n            }\n            if(bottomLeft?.value == cellValue.bomb){\n                adjBombs++;\n            }\n            if(bottom?.value === cellValue.bomb){\n                adjBombs++;\n            }\n            if(bottomRight?.value == cellValue.bomb){\n                adjBombs++;\n            }\n            if(adjBombs > 0){\n                cells[rowIndex2][colIndex2] = {\n                    ...currentCell,\n                    value: adjBombs\n                }\n            }\n        }   \n    }\n    \n    return cells;\n}\n\nexport const grabAdjCells = (cells: cell[][], row: number, col: number): \n{\n    topLeft: cell | null,\n    top: cell | null,\n    topRight: cell | null,\n    left: cell | null,\n    right: cell | null,\n    bottomLeft: cell | null,\n    bottom: cell | null,\n    bottomRight: cell | null,\n\n}=> {\n    const topLeft = row > 0 && col > 0 ? cells[row-1][col-1] : null;\n    const top = row > 0 ? cells[row-1][col] : null;\n    const topRight = row > 0 && col < MAX_COLS - 1 ? cells[row-1][col+1]: null;\n    const left = col > 0 ? cells[row][col - 1]: null;\n    const right = col < MAX_COLS - 1 ? cells[row][col+1]: null;\n    const bottomLeft = row < MAX_ROWS - 1 && col > 0 ? cells[row+1][col-1]: null;\n    const bottom = row < MAX_ROWS - 1 ? cells[row+1][col]: null;\n    const bottomRight = row < MAX_ROWS - 1 && col < MAX_COLS  - 1 ? cells[row+1][col+1]: null;\n    return {\n        topLeft,\n        top,\n        topRight,\n        left,\n        right,\n        bottomLeft,\n        bottom,\n        bottomRight,\n    }\n    \n}\nexport const openAdjEmptyCells = (cells: cell[][], row: number, col: number): cell[][] =>{\n    const currentCell = cells[row][col];    \n    \n    if(currentCell.state === cellState.visible || currentCell.state === cellState.flagged){\n        return cells;\n    }\n\n    let newCells = cells.slice();\n    newCells[row][col].state = cellState.visible\n\n    const {\n        topLeft,\n        top,\n        topRight,\n        left,\n        right,\n        bottomLeft,\n        bottom,\n        bottomRight,\n    } = grabAdjCells(cells, row, col);\n    if(topLeft?.state === cellState.open && topLeft.value != cellValue.bomb){\n        if(topLeft.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row-1, col - 1)\n        }else{\n            newCells[row-1][col-1].state = cellState.visible\n        }\n        \n    }\n\n    \n    if(top?.state === cellState.open && top.value != cellValue.bomb){\n        if(top.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row-1, col )\n        }else{\n            newCells[row-1][col].state = cellState.visible\n        }\n        \n    }\n\n    if(topRight?.state === cellState.open && topRight.value != cellValue.bomb){\n        if(topRight.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row-1, col + 1)\n        }else{\n            newCells[row-1][col+1].state = cellState.visible\n        }\n        \n    }\n\n    if(left?.state === cellState.open && left.value != cellValue.bomb){\n        if(left.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row, col - 1)\n        }else{\n            newCells[row][col-1].state = cellState.visible\n        }\n        \n    }\n    \n\n    if(right?.state === cellState.open && right.value != cellValue.bomb){\n        if(right.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row, col +1)\n        }else{\n            newCells[row][col+1].state = cellState.visible\n        }\n        \n    }    \n\n    if(bottomLeft?.state === cellState.open && bottomLeft.value != cellValue.bomb){\n        if(bottomLeft.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row+1, col-1)\n        }else{\n            newCells[row+1][col-1].state = cellState.visible\n        }\n        \n    }\n\n    if(bottom?.state === cellState.open && bottom.value != cellValue.bomb){\n        if(bottom.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row+1, col )\n        }else{\n            newCells[row+1][col].state = cellState.visible\n        }\n        \n    }\n    if(bottomRight?.state === cellState.open && bottomRight.value != cellValue.bomb){\n        if(bottomRight.value === cellValue.empty){\n            newCells=openAdjEmptyCells(newCells, row+1, col+1)\n        }else{\n            newCells[row+1][col+1].state = cellState.visible\n        }\n        \n    }\n\n    return newCells;\n}\n\n"]},"metadata":{},"sourceType":"module"}