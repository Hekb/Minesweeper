{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Desktop/Minesweeper/minesweeper/src/components/App/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"./App.scss\";\nimport Number from \"../Number\";\nimport { generateCells, openAdjEmptyCells } from \"../../utils\";\nimport Button from '../Button';\nimport { face, cellState, cellValue } from \"../../types\";\n\nconst App = () => {\n  const [cells, setCells] = useState(generateCells());\n  const [Face, setFace] = useState(face.won);\n  const [time, setTime] = useState(0);\n  const [gameStarted, setLive] = useState(false);\n  const [mineCounter, setMineCounter] = useState(10);\n  const [lost, setLost] = useState(false);\n  const [won, setWon] = useState(false);\n  useEffect(() => {\n    if (lost) return;\n\n    const mosuedown = () => {\n      setFace(face.lost);\n    };\n\n    const mouseup = () => {\n      setFace(face.won);\n    };\n\n    window.addEventListener('mousedown', mosuedown);\n    window.addEventListener('mouseup', mouseup);\n    return () => {\n      window.removeEventListener('mousedown', mosuedown);\n      window.removeEventListener('mouseup', mosuedown);\n    };\n  }, []);\n  useEffect(() => {\n    if (gameStarted && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [gameStarted, time]);\n  useEffect(() => {\n    if (lost) {\n      setFace(face.lost);\n      setLive(false);\n      setLost(true);\n    }\n  }, [lost]);\n\n  const handleCellClick = (row1, col1) => () => {\n    if (lost) return;\n\n    if (!gameStarted) {\n      setLive(true);\n    }\n\n    const currentCell = cells[row1][col1];\n    let newCells = cells.slice();\n    if (currentCell.state === cellState.flagged) return; //clicked on a mine\n\n    if (currentCell.value === cellValue.bomb) {\n      setLost(true);\n      setFace(face.lost);\n      newCells[row1][col1].red = true;\n      newCells = revealMines();\n      setCells(newCells);\n    } else if (currentCell.value === cellValue.empty || currentCell.state == cellState.visible) {\n      //clicked on empty cell\n      newCells = openAdjEmptyCells(newCells, row1, col1);\n      setCells(newCells);\n    } else {\n      //clicked on a number\n      newCells[row1][col1].state = cellState.visible;\n      setCells(newCells);\n    }\n  };\n\n  useEffect(() => {\n    if (won) {\n      setLive(false);\n      setWon(true);\n      setFace(face.won);\n    }\n  }, [won]);\n\n  const faceClicked = () => {\n    setLive(false);\n    setLost(false);\n    setTime(0);\n    setCells(generateCells());\n    setWon(false);\n  };\n\n  const handleRightClick = (row1, col1) => e => {\n    e.preventDefault();\n    const cell = cells[row1][col1];\n    const currentCells = cells.slice();\n    if (!gameStarted) return;\n\n    if (cell.state === cellState.visible) {\n      return;\n    } else if (cell.state === cellState.open) {\n      currentCells[row1][col1].state = cellState.flagged;\n      setCells(currentCells);\n      setMineCounter(mineCounter - 1);\n    } else if (cell.state === cellState.flagged) {\n      currentCells[row1][col1].state = cellState.open;\n      setCells(currentCells);\n      setMineCounter(mineCounter + 1);\n    }\n  };\n\n  const renderCells = () => {\n    return cells.map((i, rowIndex) => i.map((cell, colIndex) => /*#__PURE__*/React.createElement(Button, {\n      key: `${rowIndex}-${colIndex}`,\n      row: rowIndex,\n      col: colIndex,\n      state: cell.state,\n      value: cell.value,\n      onClick: handleCellClick,\n      rightClicked: handleRightClick,\n      red: cell.red,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  const revealMines = () => {\n    let currentcells = cells.slice();\n    currentcells = currentcells.map(row => row.map(cell => {\n      if (cell.value == cellValue.bomb) {\n        return { ...cell,\n          state: cellState.visible\n        };\n      }\n\n      return cell;\n    }));\n    return currentcells;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Minesweeper\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"Built By Hekmat\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Number, {\n    value: mineCounter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"face\",\n    onClick: faceClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-label\": \"face\",\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, Face)), /*#__PURE__*/React.createElement(Number, {\n    value: time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, renderCells()));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Matt/Desktop/Minesweeper/minesweeper/src/components/App/index.tsx"],"names":["React","useState","useEffect","Number","generateCells","openAdjEmptyCells","Button","face","cellState","cellValue","App","cells","setCells","Face","setFace","won","time","setTime","gameStarted","setLive","mineCounter","setMineCounter","lost","setLost","setWon","mosuedown","mouseup","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","handleCellClick","row1","col1","currentCell","newCells","slice","state","flagged","value","bomb","red","revealMines","empty","visible","faceClicked","handleRightClick","e","preventDefault","cell","currentCells","open","renderCells","map","i","rowIndex","colIndex","currentcells","row"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, MouseEvent} from 'react';\nimport \"./App.scss\";\nimport Number from \"../Number\";\nimport {generateCells, openAdjEmptyCells} from \"../../utils\";\nimport Button from '../Button';\nimport {cell, face, cellState, cellValue} from \"../../types\";\n\nconst App: React.FC = () =>{\n    const[cells, setCells] = useState<cell[][]>(generateCells());\n    const[Face, setFace] = useState<face>(face.won);\n    const[time, setTime] = useState<number>(0);\n    const[gameStarted, setLive] = useState<boolean>(false);\n    const[mineCounter, setMineCounter] = useState<number>(10);\n    const[lost, setLost] = useState<boolean>(false);\n    const[won, setWon] = useState<boolean>(false);\n    useEffect(() =>{\n        \n        if(lost) return;\n\n        const mosuedown = () =>{\n            setFace(face.lost);\n        }\n        const mouseup = () => {\n            setFace(face.won)\n        }\n        window.addEventListener('mousedown', mosuedown)\n        window.addEventListener('mouseup', mouseup)\n        return () => {\n            window.removeEventListener('mousedown', mosuedown)\n            window.removeEventListener('mouseup', mosuedown)\n        }\n    }, [])\n    useEffect(() => {\n        if(gameStarted && time < 999){\n            const timer = setInterval(() =>{\n                setTime(time + 1);\n            }, 1000)\n            return () => {\n                clearInterval(timer);\n            }    \n        }\n    },[gameStarted, time ]);\n    useEffect(() =>{\n        if(lost){\n            setFace(face.lost);\n            setLive(false);            \n            setLost(true)\n        }\n\n    },[lost])\n    const handleCellClick = (row1: number, col1: number) => (): void => {\n        if(lost) return;\n\n        if(!gameStarted){\n            setLive(true);\n        }\n        \n        const currentCell = cells[row1][col1];\n        let newCells = cells.slice();\n        if(currentCell.state === cellState.flagged) return;\n        //clicked on a mine\n        if(currentCell.value === cellValue.bomb){\n            setLost(true);\n            setFace(face.lost);\n            newCells[row1][col1].red = true\n            newCells = revealMines();\n            setCells(newCells);\n        }else if(currentCell.value === cellValue.empty || currentCell.state == cellState.visible){//clicked on empty cell\n            newCells = openAdjEmptyCells(newCells, row1,col1)\n            setCells(newCells)\n        }else{ //clicked on a number\n            newCells[row1][col1].state = cellState.visible\n            setCells(newCells)\n        }\n    } \n    useEffect(() => {\n        if(won){\n            setLive(false)\n            setWon(true)\n            setFace(face.won)\n        }\n\n    },[won])\n    const faceClicked = () => {\n        setLive(false)\n        setLost(false)\n        setTime(0)\n        setCells(generateCells())\n        setWon(false)\n        \n    }\n    const handleRightClick = (row1: number, col1: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void =>{\n        e.preventDefault();\n        const cell = cells[row1][col1]\n        const currentCells = cells.slice();\n        if(!gameStarted) return;\n\n        if(cell.state === cellState.visible){\n            return;\n        }else if(cell.state === cellState.open){\n            currentCells[row1][col1].state = cellState.flagged\n            setCells(currentCells)\n            setMineCounter(mineCounter - 1);\n        }else if(cell.state === cellState.flagged){\n            \n            currentCells[row1][col1].state = cellState.open\n            setCells(currentCells)\n            setMineCounter(mineCounter + 1);\n        }\n    }\n    const renderCells = ():React.ReactNode => {\n        return cells.map((i, rowIndex) => i.map((cell, colIndex) => \n        <Button key={`${rowIndex}-${colIndex}`} \n            row={rowIndex} \n            col={colIndex} \n            state={cell.state} \n            value={cell.value}\n            onClick={handleCellClick}\n            rightClicked={handleRightClick}\n            red={cell.red}\n            />)\n        );\n    };\n    \n    const revealMines = (): cell[][] =>{\n        let currentcells = cells.slice();\n        currentcells = currentcells.map(row => row.map(cell =>{\n            if(cell.value == cellValue.bomb){\n                return {\n                    ...cell,\n                    state: cellState.visible\n                }\n            }\n            return cell;\n        }))\n        return currentcells;\n    }\n    return(\n        <div className=\"App\">\n            <div className=\"preHeader\">\n                <p>Minesweeper</p>\n                <p>Built By Hekmat</p>\n            </div>\n            <div className=\"header\">\n                <Number value={mineCounter}>\n                    \n                </Number>\n                <div className=\"face\" onClick={faceClicked}> \n                    <span aria-label=\"face\" role=\"img\">{Face}</span> \n                </div>\n                <Number value={time}>\n\n                </Number>\n            </div>\n            <div className=\"body\">\n                {renderCells()}\n            </div>\n\n\n        </div>\n        \n    )\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}